# -*- coding: utf-8 -*-
"""
Created on Wed Jun 24 17:41:45 2020

@author: psycho
"""

# 做完特徵工程前的所有準備 (與前範例相同)
import pandas as pd
import numpy as np
import copy
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression

data_path = 'data/'
df = pd.read_csv(data_path + 'titanic_train.csv')

train_Y = df['Survived']
df = df.drop(['PassengerId'] , axis=1)
print(df.head())

# 計算df整體相關係數, 並繪製成熱圖
import seaborn as sns
import matplotlib.pyplot as plt
corr = df.corr()
sns.heatmap(corr)
plt.show()

# 記得刪除 Survived
df = df.drop(['Survived'] , axis=1)

#只取 int64, float64 兩種數值型欄位, 存於 num_features 中
num_features = []
for dtype, feature in zip(df.dtypes, df.columns):
    if dtype == 'float64' or dtype == 'int64':
        num_features.append(feature)
print(f'{len(num_features)} Numeric Features : {num_features}\n')

# 削減文字型欄位, 只剩數值型欄位
df = df[num_features]
df = df.fillna(-1)
MMEncoder = MinMaxScaler()
print(df.head())

print("作業1")
# 原始特徵 + 邏輯斯迴歸
train_X = MMEncoder.fit_transform(df)
estimator = LogisticRegression(solver='liblinear')
print(cross_val_score(estimator, train_X, train_Y, cv=5).mean())

high_list = list(corr[(corr['Age']> 0.1) | (corr['Age']<-0.1)].index)
high_list.pop(-1)


# 篩選相關係數1
print(high_list)

# 特徵1 + 邏輯斯迴歸
train_X = MMEncoder.fit_transform(df[high_list])
print(cross_val_score(estimator, train_X, train_Y, cv=5).mean())


# 篩選相關係數2
high_list = list(corr[(corr['Fare']>0.1) | (corr['Fare']<-0.1)].index)
high_list.remove("Survived")

print(high_list)

# 特徵2 + 邏輯斯迴歸
train_X = MMEncoder.fit_transform(df[high_list])
print(cross_val_score(estimator, train_X, train_Y, cv=5).mean())
print("A:沒有提升")


print("作業2")
from sklearn.linear_model import Lasso
L1_Reg = Lasso(alpha=0.005)

train_X = MMEncoder.fit_transform(df)
L1_Reg.fit(train_X, train_Y)
print(L1_Reg.coef_)


from itertools import compress
L1_mask = list((L1_Reg.coef_>0) | (L1_Reg.coef_<0))
L1_list = list(compress(list(df), list(L1_mask)))
print(L1_list)


# L1_Embedding 特徵 + 線性迴歸
train_X = MMEncoder.fit_transform(df[L1_list])
print(cross_val_score(estimator, train_X, train_Y, cv=5).mean())

print("A:沒有提升")
